{% extends 'base.twig' %}

{% block content %}
    <body class="uk-background-secondary">
        <div class="uk-container uk-container-medium uk-background-secondary">
            {% for item in canvas.items %}
                {% include item.template %}
            {% endfor %}
        </div>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
        <script src="https://sdk.scdn.co/spotify-player.js"></script>

        <script>
            window.onSpotifyWebPlaybackSDKReady = () => {
                let token = '{{ spotifyAccessToken }}';
                const player = new Spotify.Player({
                    name: 'Band Playlist',
                    getOAuthToken: cb => {cb(token);}
                });

                player.on('ready', ({ device_id }) => {
                    console.log('Ready with Device ID ', device_id);

                    $.ajax({
                        method: 'GET',
                        url: '{{ ROOT }}/BandPlaylist/SetDeviceId/' + device_id
                    })
                });

                player.connect();

                //prefill like colours & state
                $('.like-container').each(function () {
                    let preset = $(this).attr('preset');

                    if (preset) {
                        $(this).children().each(function () {
                            if ($(this).attr('like_type') === preset) {
                                let proper_color = $(this).attr('proper_color');
                                $(this).css('color', proper_color);
                                $(this).attr('state', 'enabled');
                            }
                        })
                    }
                });

                $('.like').on('click', function () {
                    let type = $(this).attr('like_type');
                    let state = $(this).attr('state');
                    let trackId = $(this).parent().attr('track_id');

                    let sibling = $(this).siblings().first();

                    if (state === undefined || state === 'disabled') {
                        $(this).attr('state', 'enabled');

                        let color = $(this).attr('proper_color');

                        $(this).css('color', color);
                        sibling.css('color', 'rgba(255, 255, 255, 0.7)');
                        sibling.attr('state', 'disabled');
                    } else {
                        $(this).attr('state', 'disabled');
                        type = 'neutral';
                        $(this).css('color', 'rgba(255, 255, 255, 0.7)');
                    }

                    $.ajax({
                        method: 'GET',
                        url: '{{ ROOT }}/BandPlaylist/Like/' + trackId + '/' + type
                    })
                });

                function playTrack(trackUri)
                {
                    $.ajax({
                        method: 'GET',
                        url: '{{ ROOT }}/BandPlaylist/Play/' + trackUri,
                        async: false
                    });
                }


                //Global vars
                let playerIsPaused = true;
                let lastTrack = '';

                //Handle change event
                $('input[type=range]').on('change', function () {
                    player.seek($(this).val() * 1000);

                    if (!playerIsPaused) {
                        countRangeUp($(this));
                    }
                });

                // Handle play button clicks
                $('.play-button').on('click', function () {
                    let parentDiv = $(this).parent().parent();
                    let subDiv = parentDiv.find('#rangeDiv');
                    let object = subDiv.find('input[type=range]');

                    let currentTrack = $(this).attr('track_uri');

                    $(this).prop('disabled', true);

                    if (playerIsPaused || (!playerIsPaused && lastTrack !== currentTrack)) {
                        if (lastTrack === currentTrack) {
                            player.resume();
                        } else {
                            playTrack(currentTrack);
                            object.val(0);
                            lastTrack = currentTrack;
                        }

                        countRangeUp(object);
                        playerIsPaused = false;
                    }  else {
                        player.pause();
                        playerIsPaused = true;
                        clearInterval(interval);
                    }

                    togglePlayIcon($(this).find('#icon'));


                    $(this).prop('disabled', false);
                });

                function togglePlayIcon(icon)
                {
                    icon.html((icon.html() === 'pause') ? 'play_arrow' : 'pause');
                }

                let interval;
                function countRangeUp(rangeObject)
                {
                    clearInterval(interval);

                    let initialValue = parseInt(rangeObject.val());
                    let max = parseInt(rangeObject.attr('max'));
                    let index = 0;

                    interval = setInterval(
                        function () {
                            let pos = index + initialValue;

                            rangeObject.val(parseInt(pos));

                            if (pos >= max) {
                                clearInterval(interval);
                            }

                            index ++;
                        }, 1000
                    )
                }

            };
        </script>
    </body>
{% endblock %}

